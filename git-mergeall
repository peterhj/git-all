#!/usr/bin/env python

import os
import subprocess
import sys

def main():
  if len(sys.argv) <= 1:
    default_remote = "origin"
  else:
    default_remote = sys.argv[1]
  if len(sys.argv) <= 2:
    default_branch = "master"
  else:
    default_branch = sys.argv[2]
  if not os.path.exists(".gitmanifest"):
    print("mergeall: missing .gitmanifest")
    return
  updated = []
  missing = []
  failed = []
  with open(".gitmanifest") as manifest:
    for entry in manifest:
      entry = entry.strip()
      if not os.path.exists(entry):
        print("mergeall: warning: missing repository '{}'".format(entry))
        missing.append(entry)
        continue
      sys.stdout.write("mergeall: descending into '{}'... ".format(entry))
      args = ["git", "merge", "--ff-only", "{}/{}".format(default_remote, default_branch)]
      p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=entry)
      p.wait()
      ret = p.returncode
      out = p.stdout.read()
      err = p.stderr.read()
      if ret == 0 and out == "Already up-to-date.\n":
        print("ok")
      elif ret == 0:
        print("success:")
        print(out)
        updated.append(entry)
      if ret != 0 or len(err) != 0:
        print("FAILED:")
        print(out)
        print(err)
      if False:
        print("mergeall:   return: {}".format(ret))
        print("mergeall:   stdout: {}".format(out))
        print("mergeall:   stderr: {}".format(err))
      if ret != 0:
        failed.append(entry)
  if len(updated) != 0:
    print("")
    print("UPDATED:")
    for entry in updated:
      print("  '{}'".format(entry))
  if len(missing) != 0:
    print("")
    print("MISSING:")
    for entry in missing:
      print("  '{}'".format(entry))
  if len(failed) != 0:
    print("")
    print("FAILED TO MERGE:")
    for entry in failed:
      print("  '{}'".format(entry))

if __name__ == "__main__":
  main()
